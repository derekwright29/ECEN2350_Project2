
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Project2_top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

			 
	//state vars
//	reg [2:0] currState,nextState;
//	assign LED[8:6] = currState; //display state on LEDs
//	reg [1:0] buttons;
	wire clk_1kHz;
//	
	wire [12:0] ReacTime; //means we can go up to 8.191 seconds
	wire [15:0] HEX_out;
	
	wire LFSR_count_enable;


//defining states
parameter HI_SCORE = 3'b000;
parameter DELAYING = 3'b001;
parameter TIMING = 3'b010;
parameter DISPLAYING = 3'b011;
parameter GO_BUFFS = 3'b1xx; //last two digits are don't cares.



//=======================================================
//  Structural coding
//=======================================================

//	
//	 //Button sate control
//   always @(posedge KEY[1])
//     begin
//	buttons[1] = ~buttons[1];
//     end
//   always @(posedge KEY[0])
//     begin
//		buttons[0] = ~buttons[0];
//     end
//	  
//	 stateMachine detState(clk_50MHZ, currState, nextState);
//	 clk_divider(clk_50MHZ, clk_1kHZ);
//	 
//	 always @ (currState)
//		begin
//			if (currState == COUNTING) begin
//				timer BCD_counter(clk_1kHZ, ReacTime);
//		end
//		
//		dispTime BCD(ReacTime, HEX_out);
//		
//		assign HEX0 = HEX_out[7:0];

   wire LFSR_ready, LFSR_en,delay_over;
   reg [9:0] LFSR_out;
   initial
     begin
	LFSR_out = 10'b1000101101;
     end
// attempt: doesn't compile. Probably because of while/generate combo...
//   always @(posedge LFSR_en)
//     begin
//		generate
//			while(!LFSR_ready)
//				begin
//					LFSR get_delay0(LFSR_en, LFSR_out, LFSR_ready);
//				end
//	   endgenerate
//		LFSR_ready = 0; //reset for next time
//		LFSR_count_enable = 1;
//     end
   
   counter wait_delay(clk_1kHz, 1, LFSR_count_enable, LFSR_out, delay_over);
		

   clock_div test1(MAX10_CLK1_50, clk_1kHz);
   BCD_counter timer1(clk_1kHz, ReacTime);
   BCD_decoder BCD(ReacTime, HEX_out);
   
   
   SevenSeg mS(HEX_out[3:0], HEX0[6:0],0);
   SevenSeg cS(HEX_out[7:4], HEX1[6:0],0);
   SevenSeg dS(HEX_out[11:8], HEX2[6:0],0);
   SevenSeg S(HEX_out[15:12], HEX3[6:0],0);
   
   assign HEX0[7] = 1;
   assign HEX1[7] = 1;
   assign HEX2[7] = 0;
   assign HEX3[7] = 1;
   

endmodule // Project2_top




